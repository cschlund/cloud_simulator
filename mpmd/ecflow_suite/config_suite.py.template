#!/usr/bin/env python2.7

import os

# -------------------------------------------------------
# -- modify this ----------------------------------------
# -------------------------------------------------------

# -- user settings
remote_host_name = "cca"
remote_user_name = "sf7"

# -- base path, user specific
perm = "/perm/ms/de/sf7/cschlund"
scratch = "/scratch/ms/de/sf7/cschlund"

# -- subfolder, where your repository is located
#    e.g. /perm/ms/de/sf7/cschlund/SIMULATOR/cloud_simulator
itype = "SIMULATOR"

# -- suite name
mysuite = "CLOUD_SIMULATOR"

# -- cloud simulator version
version = "v2.0"

# -- mpmd_threads_number must be >= $LENGTH defined in config.sh
mpmd_threads_number = 12
# -- get_era_data from MARS archive
serial_threads_number = 2

# -- select cot threshold value
#thv = "0.001"
thv = "0.15"
#thv = "1.00"

# -- select phase option
mpc = "1"
#mpc = "2"

if mpc is "1":
    mpc_str = "SeparPhase"
elif mpc is "2":
    mpc_str = "MixedPhase"
else:
    mpc_str = "undef"

# -- select overlap option
#overlap = "1"
#overlap = "2"
overlap = "3"

if overlap is "1":
    overlap_str = "Max"
elif overlap is "2":
    overlap_str = "Rand"
elif overlap is "3":
    overlap_str = "MaxRand"
else:
    overlap_str = "undef"

# -- select scops option
scops = "1"
#scops = "2"

if scops is "1":
    scops_str = "DWDscops"
elif scops is "2":
    scops_str = "COSPscops"
else:
    scops_str = "undef"

# -- select CWC option
#    modification of ERA lwc & iwc profile using t-profile
#cwcmod = "1"
cwcmod = "2"

if cwcmod is "1":
    cwcmod_str = "OriCWC"
elif cwcmod is "2":
    cwcmod_str = "ModCWC"
else:
    cwcmod_str = "undef"

# -- final output directory for netCDF files under "output"
crun = version + "_" + scops_str + "_" + overlap_str + \
                 "_" + mpc_str + "_" + cwcmod_str

# -- store final output in ECFS archive
ecfs_path = "ec:/sf7/cloud_simulator"
tar_prefix = "ERA_Interim"
tar_suffix = "tgz"

# -------------------------------------------------------
# -- modify below if you know what you are doing!
# -------------------------------------------------------

# -- ecgate and cca
repository = "cloud_simulator"
perm_base = os.path.join(perm, itype, repository)
scratch_base = os.path.join(scratch, itype, repository)

# -- cca:
input = os.path.join(scratch_base, "input")
output = os.path.join(scratch_base, "output")
prog = os.path.join(perm_base, "fortran", "cloud_simulator.x")
sstfile = os.path.join(perm_base, "aux", "sst_era_interim_0.5_0.5.nc")

# -- new pycmsaf software: python setup.py install --prefix=$PERM/usr
prefix = "/perm/ms/de/sf7/usr"
sitepack = os.path.join(prefix, "lib/python2.7/site-packages")
binaries = os.path.join(prefix, "bin")
library  = os.path.join(prefix, "lib")

# -- paths to be exported: $PATH, $PYTHONPATH
export_path = binaries
export_python_path = "/usr/local/apps/python/current/bin/python"
export_library_path = library

# -- server settings @ ecgate
mpmd_mode = "remote"
mpmd_submit_cmd = "qsub"
mpmd_database = os.path.join(perm_base, "mpmd", "mpmd_" + itype + ".sqlite3")
# -- new pycmsaf software
mpmd_submit_script = os.path.join(binaries, "pycmsaf-mpmd-submit")
ecflow_submit = os.path.join(binaries, "pycmsaf-ecf-submit")
mpmd_client_prog = os.path.join(binaries, "pycmsaf-mpmd-client")
# -- mpmd subdirs
suite_home_dir = os.path.join(perm_base, "mpmd/ecflow_suite")
ecf_files_dir = os.path.join(suite_home_dir, "tasks")
ecf_include_dir = os.path.join(suite_home_dir, "include")
ecf_home_dir = os.path.join(scratch_base, "generated")
ecf_out_dir = os.path.join(scratch_base, "log")
remote_home_dir = os.path.join(perm_base, "mpmd/generated")
remote_log_dir = os.path.join(scratch_base, "mpmd/log")

# -- command for submitting serial and mpmd jobs
serial_job_cmd = "%PYTHON% %ECF_SUBMIT% " \
                 "%REMOTE_USER% %REMOTE_HOST% " \
                 "%ECF_JOB% %REMOTE_LOGDIR%%ECF_NAME%.%ECF_TRYNO% > " \
                 "%ECF_OUT%%ECF_NAME%.%ECF_TRYNO% 2>&1"

mpmd_job_cmd = "%PYTHON% %MPMD_CLIENT% --dbfile=%MPMD_DATABASE% " \
               "add_task --suite=%SUITE% " \
               "--queue=%TASK% --ecf_jobfile=%ECF_JOB% " \
               "--logfile=%ECF_JOBOUT% " \
               "--remote_ecf_jobfile=%REMOTE_HOME%%ECF_NAME%.job%ECF_TRYNO% " \
               "--remote_logfile=%REMOTE_LOGDIR%%ECF_NAME%.%ECF_TRYNO% " \
               "--abs_node_path=%ECF_NAME% > %ECF_OUT%%ECF_NAME%.mpmdsub 2>&1 "

ecgate_job_cmd = "sbatch %ECF_JOB% > " \
                 "%ECF_OUT%%ECF_NAME%.%ECF_TRYNO%.sub 2>&1"

