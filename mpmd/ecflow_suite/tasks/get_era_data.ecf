%include <pbs_mars_serial.h>
%include <head.h>
%include <myexport.h>

ERA_PATH=%INPUT%/%YYYYMM%

echo "I am task %TASK% in family %FAMILY% responsible for dearchiving ERA-Interim data to: ${ERA_PATH}"

#python -c "import time; import numpy; time.sleep(numpy.random.randint(1, 20))"

# availability flag
flag=-1

# check if data already on scratch
if [ -d ${ERA_PATH} ]; then

    echo "YES: ${ERA_PATH} exists, now check if all input data exist"

    ngribs=$((%NDAYS%*4))
    nfiles=$(ls ${ERA_PATH}/ERA*grib | wc -l)

    if [ ${nfiles} -eq ${ngribs} ]; then
        echo "YES: ${ngribs} ERA-Interim grib-files available == complete"
        flag=0
    else
        echo "NO: ${nfiles}/${ngribs}, thus MARS request for ${YYYYMM} required"
    fi

else

    echo "NO: ${ERA_PATH} does not exist, thus create it and get data from MARS"
    mkdir -p ${ERA_PATH}

fi


if [ ${flag} -ne 0 ]; then


# -- upper air parameters on model level
# 130: temperature             [ K ]
# 133: specific humidity       [ kg/kg ]
# 246: liquid water content    [ kg/kg ]
# 247: ice water content       [ kg/kg ]
# 248: cloud cover             ( 0 - 1 )
#
# 129: surface geopotential    [ m^2 s^-2 ]
# 152: log surface pressure    [ ]

export MARS_MULTITARGET_STRICT_FORMAT=1

TYPE=an
STEP=00
DATE=%START_DATE%/to/%END_DATE%

mars << EOF
     retrieve,
        time     = 0000/0600/1200/1800,
        date     = ${DATE},
        stream   = oper,
        levtype  = ml,
        levelist = all,
        expver   = 1,
        type     = ${TYPE},
        step     = ${STEP},
        class    = ei,
        param    = 129/130/133/152/246/247/248,
        grid     = 0.5/0.5,
        target   = "${ERA_PATH}/ERA_Interim_${TYPE}_[date]_[time]+${STEP}_mlev.grib"
EOF

rc=$?

if [ ${rc} -eq 0 ]; then
    echo "The MARS ERA Interim request for ${DATE} was successfully at `date`!"
fi

if [ ${rc} -ge 1 ]; then
    echo " --- ERROR: The MARS ERA Interim request for ${DATE} FAILED at `date`!"
    exit 1
fi


# end of if-loop in case no/not all data are on scratch
fi

%include <tail.h>
